// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internalapi/dialog_service.proto

package internalapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DialogService_CreateDialog_FullMethodName      = "/social_network.internalapi.DialogService/CreateDialog"
	DialogService_CreateMessage_FullMethodName     = "/social_network.internalapi.DialogService/CreateMessage"
	DialogService_GetDialogMessages_FullMethodName = "/social_network.internalapi.DialogService/GetDialogMessages"
)

// DialogServiceClient is the client API for DialogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DialogServiceClient interface {
	CreateDialog(ctx context.Context, in *CreateDialogRequest, opts ...grpc.CallOption) (*CreateDialogResponse, error)
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDialogMessages(ctx context.Context, in *GetDialogMessagesRequest, opts ...grpc.CallOption) (*GetDialogMessagesResponse, error)
}

type dialogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDialogServiceClient(cc grpc.ClientConnInterface) DialogServiceClient {
	return &dialogServiceClient{cc}
}

func (c *dialogServiceClient) CreateDialog(ctx context.Context, in *CreateDialogRequest, opts ...grpc.CallOption) (*CreateDialogResponse, error) {
	out := new(CreateDialogResponse)
	err := c.cc.Invoke(ctx, DialogService_CreateDialog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DialogService_CreateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) GetDialogMessages(ctx context.Context, in *GetDialogMessagesRequest, opts ...grpc.CallOption) (*GetDialogMessagesResponse, error) {
	out := new(GetDialogMessagesResponse)
	err := c.cc.Invoke(ctx, DialogService_GetDialogMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DialogServiceServer is the server API for DialogService service.
// All implementations should embed UnimplementedDialogServiceServer
// for forward compatibility
type DialogServiceServer interface {
	CreateDialog(context.Context, *CreateDialogRequest) (*CreateDialogResponse, error)
	CreateMessage(context.Context, *CreateMessageRequest) (*emptypb.Empty, error)
	GetDialogMessages(context.Context, *GetDialogMessagesRequest) (*GetDialogMessagesResponse, error)
}

// UnimplementedDialogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDialogServiceServer struct {
}

func (UnimplementedDialogServiceServer) CreateDialog(context.Context, *CreateDialogRequest) (*CreateDialogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDialog not implemented")
}
func (UnimplementedDialogServiceServer) CreateMessage(context.Context, *CreateMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedDialogServiceServer) GetDialogMessages(context.Context, *GetDialogMessagesRequest) (*GetDialogMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogMessages not implemented")
}

// UnsafeDialogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DialogServiceServer will
// result in compilation errors.
type UnsafeDialogServiceServer interface {
	mustEmbedUnimplementedDialogServiceServer()
}

func RegisterDialogServiceServer(s grpc.ServiceRegistrar, srv DialogServiceServer) {
	s.RegisterService(&DialogService_ServiceDesc, srv)
}

func _DialogService_CreateDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDialogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).CreateDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_CreateDialog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).CreateDialog(ctx, req.(*CreateDialogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_GetDialogMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).GetDialogMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_GetDialogMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).GetDialogMessages(ctx, req.(*GetDialogMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DialogService_ServiceDesc is the grpc.ServiceDesc for DialogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DialogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "social_network.internalapi.DialogService",
	HandlerType: (*DialogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDialog",
			Handler:    _DialogService_CreateDialog_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _DialogService_CreateMessage_Handler,
		},
		{
			MethodName: "GetDialogMessages",
			Handler:    _DialogService_GetDialogMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalapi/dialog_service.proto",
}
